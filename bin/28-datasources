#!/usr/bin/env node
'use strict';

var cli = require('commander');
var _ = require('lodash');
var fs = require('fs');
var Q = require('q');

require('colors');

var pkg = require('../package.json');
var Config = require('../lib/config').Config;

Config.load();
var $28 = Config.getAPIClient();

//Proxy Settings
//var globalTunnel = require('global-tunnel');

//globalTunnel.initialize({
//    host: '127.0.0.1',
//    port: 8888,
//    sockets: 50 // optional pool size for each http and https
//});

var categories = [
    'MongoDB', 'ElasticSearch', 'JDBC', 'Cloudant',
    'CloudSearch', 'S3', 'SPARQL', 'MarkLogic'
];

cli
    .command('list [project-name]')
    .description('List Datasources')
    .action(function(projectName){
        projectName = projectName || Config.getDefaultProject();
        Config.refreshTokens(projectName).then(function(){
            var projectToken;
            try {
                projectToken = Config.getProjectToken(projectName);
            } catch(e) {
                console.error(('Project not found: ' + projectName).red);
                return;
            }
            console.log('Listing datasources...'.grey);
            var colors = {
                MongoDB: 'green',
                ElasticSearch: 'cyan',
                JDBC: 'blue',
                Cloudant: 'magenta',
                CloudSearch: 'yellow',
                S3: 'cyan',
                SPARQL: 'orange',
                MarkLogic: 'red'
            };
            Q.all([
                $28.listDatasources(Config.getProjectEndpoint(projectName), projectToken),
                $28.getDefaultMongoDBCredentials(projectName, Config.getAccessToken())
            ])
                .then(function(result) {
                    var difault = result[1].body;
                    difault.category = 'MongoDB';
                    difault.name = 'default';
                    result[0].body.push(difault);
                    var sources = result[0].body;
                    if(sources.length === 0) {
                        console.log('No datasources have been configured yet.');
                    }
                    var groups = sources.sort().reduce(function(con, e){
                        if(!con[e.category]) {
                            con[e.category] = [];
                        }
                        con[e.category].push(e);
                        return con;
                    }, {});
                    _.forEach(groups, function(list, category) {
                        var color = colors[category];
                        var bgColor = 'bg' + color[0].toUpperCase() + color.substring(1);
                        console.log(('  ' + category + '  ')[bgColor].white);
                        list.forEach(function(source){
                            console.log(('* ' + source.name + (source.default ? ' (default)' : ''))[color]);
                        });
                    });
                })
                .catch(Config.handleAPIError);
        });
    });

cli
    .command('set [project-name]')
    .description('Configure the project Datasources')
    .option('-c, --config <file>', 'Configuration file')
    .action(function(projectName, options){
        projectName = projectName || Config.getDefaultProject();
        var sources = JSON.parse(fs.readFileSync(options.config, 'utf-8'));
        Config.refreshTokens(projectName).then(function() {
            var projectToken;
            try {
                projectToken = Config.getProjectToken(projectName);
            } catch (e) {
                console.error(('Project not found: ' + projectName).red);
            }
            console.log('Listing datasources...'.grey);
            return $28.listDatasources(Config.getProjectEndpoint(projectName), projectToken).then(function(data){
                var promises = [];
                data.body.forEach(function(source) {
                    promises.push($28.removeDatasource(Config.getProjectEndpoint(projectName), source.category, source.name, projectToken));
                });
                sources.forEach(function(source) {
                    if(categories.indexOf(source.category) === -1) {
                        throw new Error(source.category + ' not an available datasource category. Available categories: ' + JSON.stringify(categories));
                    }
                    if(source.default === true && source.category === 'MongoDB') {
                        promises.push($28.updateDefaultMongoDBCredentials(
                            projectName, Config.getAccessToken(), 'user',
                            source.credentials['conn-string'], source.credentials.db, source.credentials.user,
                            source.credentials.pass, source.credentials['pre-digested'] === true ? true : undefined
                        ));
                    } else {
                        promises.push($28.createDatasource(
                            Config.getProjectEndpoint(projectName), source.category, source.name,
                            projectToken, source.default === true, JSON.stringify(source.credentials)
                        ));
                    }
                });
                console.log('Updating datasources...'.grey);
                return Q.all(promises);
            }).then(function(){
                console.log('Done.'.grey);
            });
        })
        .catch(Config.handleAPIError);
    });

cli.version(pkg.version);
cli.parse(process.argv);

if (!cli.args.length) {
    cli.help();
}
