#!/usr/bin/env node
'use strict';

var cli = require('commander');
var _ = require('lodash');
var fs = require('fs');
var Q = require('q');

require('colors');

var pkg = require('../package.json');
var Config = require('../lib/config').Config;

Config.load();
var $28 = Config.getAPIClient();


cli
    .command('list [rewrite-rules]')
    .description('List Rewrite Rules')
    .action(function(projectName){
        projectName = projectName || Config.getDefaultProject();
        Config.refreshTokens(projectName).then(function(){
            var projectToken;
            try {
                projectToken = Config.getProjectToken(projectName);
            } catch(e) {
                console.error(('Project not found: ' + projectName).red);
                return;
            }
            $28.getCustomRewriteRules(projectName, projectToken)
                .then(function(result) {
                    console.log(result);
                })
                .catch(Config.handleAPIError);
        });
    });

cli
    .command('set [rewrite-rules]')
    .description('Configure the project Datasources')
    .option('-c, --config <file>', 'Configuration file')
    .action(function(projectName, options){
        projectName = projectName || Config.getDefaultProject();
        var sources = JSON.parse(fs.readFileSync(options.config, 'utf-8'));
        Config.refreshTokens(projectName).then(function() {
            var projectToken;
            try {
                projectToken = Config.getProjectToken(projectName);
            } catch (e) {
                console.error(('Project not found: ' + projectName).red);
            }
            console.log('Listing datasources...'.grey);
            return $28.listDatasources(projectName, projectToken).then(function(data){
                var promises = [];
                data.body.forEach(function(source) {
                    promises.push($28.removeDatasource(projectName, source.category, source.name, projectToken));
                });
                sources.forEach(function(source) {
                    if(source.default === true && source.category === 'MongoDB') {
                        promises.push($28.updateDefaultMongoDBCredentials(
                            projectName, Config.getAccessToken(), 'user',
                            source.credentials['conn-string'], source.credentials.db, source.credentials.user,
                            source.credentials.pass, source.credentials['pre-digested'] === true ? true : undefined
                        ));
                    } else {
                        promises.push($28.createDatasource(
                            projectName, source.category, source.name,
                            projectToken, source.default === true, source.credentials
                        ));
                    }
                });
                console.log('Updating datasources...'.grey);
                return Q.all(promises);
            }).then(function(){
                console.log('Done.'.grey);
            });
        })
        .catch(Config.handleAPIError);
    });

cli.version(pkg.version);
cli.parse(process.argv);

if (!cli.args.length) {
    cli.help();
}
